{"version":3,"sources":["components/Button.jsx","components/Clock.jsx","components/Input.jsx","components/HintMessage.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","label","onClickHandler","isMax","onClick","className","cn","Clock","time","initialValue","isLowTime","isLowestTime","seconds","minutes","Math","floor","toString","length","format","Input","handleCountdown","isActive","toggleActive","reset","inputRef","useRef","disabledInput","onSubmit","event","preventDefault","stringSeconds","current","value","isValid","match","parseInt","type","ref","placeholder","disabled","HintMessage","isHalfWay","green","autoPlay","src","App","useState","setInitialValue","setSeconds","setIsActive","speed","setSpeed","useEffect","interval","setInterval","clearInterval","inputProps","formatMinutesToSeconds","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.92ebfb37.chunk.js","sourcesContent":["import React from 'react'\nimport cn from 'classnames'\n\nexport const Button = ({ label, onClickHandler, isMax }) => (\n    <button onClick={onClickHandler} className={cn(\"button\", isMax && \"button--max\")}>\n        {label}\n    </button>\n)","import React from 'react'\nimport cn from 'classnames'\n\nconst LOW_TIME = 20\nconst LOWEST_TIME = 10\n\nexport const Clock = ({ time, initialValue }) => {\n\n    const format = time => {\n        let seconds = time % 60\n        let minutes = Math.floor(time / 60)\n\n        minutes = minutes.toString().length === 1 ? \"0\" + minutes : minutes\n        seconds = seconds.toString().length === 1 ? \"0\" + seconds : seconds\n\n        return minutes + ':' + seconds\n    }\n\n    const isLowTime = initialValue && time <= LOW_TIME\n    const isLowestTime = initialValue && time <= LOWEST_TIME\n\n    return (\n        <div className={cn(\"time\", isLowTime && \"time--low\", isLowestTime && \"button--blink\")}>\n            {format(time)}\n        </div>\n    )\n}","import React, { useRef } from 'react'\n\nexport const Input = ({ handleCountdown, isActive, toggleActive, seconds, reset, initialValue }) => {\n\n    const inputRef = useRef()\n\n    const onSubmit = event => {\n        event.preventDefault()\n        const stringSeconds = inputRef.current.value\n        const isValid = stringSeconds.match(/[0-9]/)\n\n        if (isActive || (!isActive && seconds)) {\n            toggleActive()\n            return\n        }\n        if (isValid) {\n            inputRef.current.value = ''\n            handleCountdown(parseInt(stringSeconds, 10))\n        }\n    }\n\n    const disabledInput = isActive || seconds;\n\n    return (\n        <form onSubmit={onSubmit}>\n            <input\n                type=\"text\"\n                ref={inputRef}\n                placeholder=\"enter time in minutes\"\n                disabled={disabledInput}\n                className=\"app__field\"\n            />\n            <input\n                type=\"submit\"\n                value={isActive ? \"Pause\" : initialValue && seconds ? \"Resume\" : \"Start\"}\n                className={`button button__primary button__primary--${isActive ? 'active' : 'inactive'}`}>\n            </input>\n            <button className=\"button\" onClick={reset}>\n                Reset\n            </button>\n        </form>\n    )\n}","import React from 'react'\n\nexport const HintMessage = ({ initialValue, seconds }) => {\n\n    const soundFilePath = 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3';\n    const isHalfWay = (seconds * 100) / initialValue <= 50\n    const timerFinished = initialValue && !seconds\n\n    if (timerFinished) {\n        return (\n            <>\n                <audio ref={(green) => { green = green }} autoPlay>\n                    <source src={soundFilePath} type=\"audio/mpeg\"></source>\n                </audio>\n                <div>Time's Up!</div>\n            </>\n        )\n    }\n\n    if (isHalfWay) {\n        return <div>More than halfway there!</div>\n    }\n\n    return null\n}","import React, { useEffect, useState } from 'react'\nimport { Button, Input, Clock, HintMessage } from './components'\nimport './App.scss'\n\nconst NORMAL_SPEED = 1000;\nconst ONE_AND_HALF_SPEED = 750;\nconst DOUBLE_SPEED = 500;\nconst MAX_SPEED = 100;\n\nconst App = () => {\n    const [initialValue, setInitialValue] = useState(null);\n    const [seconds, setSeconds] = useState(0)\n    const [isActive, setIsActive] = useState(false)\n    const [speed, setSpeed] = useState(NORMAL_SPEED)\n\n    const toggleActive = () => setIsActive(!isActive)\n\n    const reset = () => {\n        setSeconds(0)\n        setIsActive(false)\n        setInitialValue(null)\n    }\n\n    const handleCountdown = minutes => {\n        if (minutes > 0) {\n            const formatMinutesToSeconds = minutes * 60;\n\n            setSeconds(formatMinutesToSeconds)\n            setInitialValue(formatMinutesToSeconds)\n            setIsActive(true)\n        }\n    }\n\n    useEffect(() => {\n        let interval = null\n        if (isActive && seconds > 0) {\n            interval = setInterval(() => {\n                setSeconds(seconds => seconds - 1)\n            }, speed)\n        } else if (!isActive && seconds !== 0) {\n            clearInterval(interval)\n        }\n        return () => clearInterval(interval)\n    }, [isActive, seconds])\n\n    const inputProps = {\n        handleCountdown,\n        initialValue,\n        toggleActive,\n        isActive,\n        seconds,\n        reset\n    }\n\n    return (\n        <div className=\"app\">\n            <HintMessage\n                initialValue={initialValue}\n                seconds={seconds}\n            />\n            <Clock\n                time={seconds}\n                initialValue={initialValue}\n            />\n            <Input {...inputProps} />\n            <div>\n                <Button onClickHandler={() => setSpeed(NORMAL_SPEED)} label='1.0x' />\n                <Button onClickHandler={() => setSpeed(ONE_AND_HALF_SPEED)} label='1.5x' />\n                <Button onClickHandler={() => setSpeed(DOUBLE_SPEED)} label='2.0x' />\n                <Button onClickHandler={() => setSpeed(MAX_SPEED)} label='MAX' isMax />\n            </div>\n        </div>\n    )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}